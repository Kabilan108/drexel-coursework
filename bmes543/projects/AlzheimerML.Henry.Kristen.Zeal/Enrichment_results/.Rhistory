list.of.packages = c( 'stringr')
new.packages = list.of.packages[!(list.of.packages %in% installed.packages()[,"Package"])]
if(length(new.packages)) install.packages(new.packages, repos='http://cran.us.r-project.org')
if (!require("BiocManager", quietly = TRUE)){
install.packages("BiocManager", repos='http://cran.us.r-project.org', quietly = T)
}
BiocManager::install("rrvgo")
version
R
base::version
if (!require("BiocManager", quietly = TRUE)){
install.packages("BiocManager", repos='http://cran.us.r-project.org', quietly = T)
}
BiocManager::install("rrvgo")
base::version
version
list.of.packages = c( 'stringr')
new.packages = list.of.packages[!(list.of.packages %in% installed.packages()[,"Package"])]
if(length(new.packages)) install.packages(new.packages, repos='http://cran.us.r-project.org')
if (!require("BiocManager", quietly = TRUE)){
install.packages("BiocManager", repos='http://cran.us.r-project.org', quietly = T)
}
BiocManager::install("rrvgo")
BiocManager::install("org.Hs.eg.db")
if (!require("BiocManager", quietly = TRUE)){
install.packages("BiocManager", repos='http://cran.us.r-project.org', quietly = T)
}
BiocManager::install("rrvgo")
BiocManager::install("org.Hs.eg.db")
library('rrvgo')
setwd(args[1])
files = list.files(pattern = '*_results.txt')
if(length(files) != 0){
for (i in 1:length(files)) {
DAVID_results = read.delim(files[i])
term  = stringr::str_extract(DAVID_results$Term , "GO:[0-9]*")
simMatrix <- calculateSimMatrix(term,
orgdb="org.Hs.eg.db",
ont="BP",
method="Rel")
scores <- setNames(-log10(DAVID_results$PValue), term)
reducedTerms <- reduceSimMatrix(simMatrix,
scores,
threshold=0.7,
orgdb="org.Hs.eg.db")
png(file=paste0(files[i], ".png"), width=600, height=350)
treemapPlot(reducedTerms)
dev.off()
}
}else{
print('Error, no DE gene lists found...')
}
files
list.files
getwd()
files = list.files(pattern = '*_results.txt')
files
setwd('../Enrichment_results/')
files = list.files(pattern = '*_results.txt')
if(length(files) != 0){
for (i in 1:length(files)) {
DAVID_results = read.delim(files[i])
term  = stringr::str_extract(DAVID_results$Term , "GO:[0-9]*")
simMatrix <- calculateSimMatrix(term,
orgdb="org.Hs.eg.db",
ont="BP",
method="Rel")
scores <- setNames(-log10(DAVID_results$PValue), term)
reducedTerms <- reduceSimMatrix(simMatrix,
scores,
threshold=0.7,
orgdb="org.Hs.eg.db")
png(file=paste0(files[i], ".png"), width=600, height=350)
treemapPlot(reducedTerms)
dev.off()
}
}else{
print('Error, no DE gene lists found...')
}
for (i in 1:length(files)) {
print(i)
DAVID_results = read.delim(files[i])
term  = stringr::str_extract(DAVID_results$Term , "GO:[0-9]*")
simMatrix <- calculateSimMatrix(term,
orgdb="org.Hs.eg.db",
ont="BP",
method="Rel")
scores <- setNames(-log10(DAVID_results$PValue), term)
reducedTerms <- reduceSimMatrix(simMatrix,
scores,
threshold=0.7,
orgdb="org.Hs.eg.db")
png(file=paste0(files[i], ".png"), width=600, height=350)
treemapPlot(reducedTerms)
dev.off()
}
DAVID_results = read.delim(files[i])
DAVID_results
term  = stringr::str_extract(DAVID_results$Term , "GO:[0-9]*")
term
simMatrix <- calculateSimMatrix(term,
orgdb="org.Hs.eg.db",
ont="BP",
method="Rel")
for (i in 1:length(files)) {
print(i)
DAVID_results = read.delim(files[i])
term  = stringr::str_extract(DAVID_results$Term , "GO:[0-9]*")
simMatrix <- calculateSimMatrix(term,
orgdb="org.Hs.eg.db",
ont="BP",
method="Rel")
scores <- setNames(-log10(DAVID_results$PValue), term)
reducedTerms <- reduceSimMatrix(simMatrix,
scores,
threshold=0.7,
orgdb="org.Hs.eg.db")
png(file=paste0(files[i], ".png"), width=600, height=350)
treemapPlot(reducedTerms)
dev.off()
}
i = 1
i = 2
DAVID_results = read.delim(files[i])
files[i]
files
?list.files
files = list.files(pattern = '*_results.txt$', )
filse
files
