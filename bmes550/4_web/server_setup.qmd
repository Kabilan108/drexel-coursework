---
title: "Web Programming Homework"
format: 
  pdf:
    toc: true
    number-sections: true
    colorlinks: true
---

# Web Server Setup

## Getting the Software

On Mac, you already have Apache and php installed.
On Windows, you can install Apache and php separately by downloading them from
their websites, or use a pre-packaged “stack”, such as [Ammps](https://www.ampps.com/downloads).

## Location of Configuration Files

After you install Apache and PHP, you need to modify their configuration files.
You need to know where your configuration files are.

- On Mac, they're (probably) located in /etc/apache2/httpd.conf and /etc/php.ini
- On Windows, if you used Ammps installation, check “C:/Program Files/Ammps/conf/httpd.conf”
  - Use "Ampps/apache/conf/httpd.conf"
- On Windows, if you installed Apache and php yourself, they're (probably) C:/Apache24/conf/httpd.conf and C:/Windows/php.ini

If you cannot locate your configuration files, just search your computer for the file names httpd.conf and php.ini

## Restarting Apache

After you change a configuration, you need to restart Apache.

To restart Apache on Mac, type the following in Terminal:

```bash
sudo /usr/sbin/apachectl restart
```

To restart Apache on Windows, (assuming you installed it as a service) go to
Computer Management → Services and restart the Apache service.
To restart Apache on Ammps, use the Ammps program to restart Apache.

## Changing configuration files

Your operating system may not allow you to change files unless you're an
Administrator.

- On Windows, you can use Matlab (or any other editor) to change the
  configuration files.
  - If you get permission denied error when you try to make changes, you need
    to run your editor as an Administrator (e.g., run Matlab as Administrator
    and then edit the file from Matlab).
- On Mac, you can type “sudo open -t /path/to/config/file” where you replace the
  path with the configuration file you'd like to edit. Mac has become more
  paranoid and even a sudo may not allow you to change system files. You can use
  a command-window based editor “nano” to edit system files. On Mac, you can
  type “sudo nano /path/to/config/file” where you replace the path with the
  configuration file you'd like to edit.

## Letting Apache know where php is

- If you installed Ammps, you can skip this section. Ammps has already changed
  httpd.conf for you to load the php module.
- On Mac, add the following to the end of your Apache configuration file:

```bash
LoadModule php7_module libexec/apache2/libphp7.so
```

You may need to modify the libphp module version. Check your /usr/libexec folder
(using terminal or Finder) for the correct file version.
A “LoadModule …” line may already be present in your configuration file, but it
may be commented out as ”#LoadModule …”. An alternative to adding new lines to
the end of the configuration file would be to uncomment this LoadModule statement.

- On Windows, if you installed Apache and php yourself, replace the module path
  with where you installed php, e.g., if you install php in C:/php/ then add
  the following to Apache configuration:

```bash
LoadModule php5_module C:/php/php5apache2_4.dll
```

## Make Apache use php for *.php files

If you installed Ammps, you can skip this.

If you are on a Mac; or if you are on Windows and you installed Apache yourself:
add the following to the end of your Apache configuration file:

```bash
AddType text/html .php 
AddHandler application/x-httpd-php .php
```

## Document Root

The Apache configuration file specifies a DocumentRoot folder, which is served
when you request the [localhost](http://localhost) page.
On Mac, it's /Library/WebServer/Documents . On Windows, if you used Ammps, it
is: C:\Program Files\Ampps\www/. On Windows, if you installed Apache yourself,
it may be in C:/Apache24/htdocs.

## Locating php.ini file

To figure out where your php.ini file is, create a file phpinfo.php under your
document folder with the contents ”<?php phpinfo();” (without the quotes). Then,
visit http://localhost/phpinfo.php page in your browser. The phpinfo will list
where the ini folder where the php.ini file is expected. On mac, it's usually
at /etc/php.ini, and on Windows it's usually at C:/Windows/php.ini. If you are
using Ammps, it may be at C:\Program Files\Ampps\php-7.3\php.ini

If you cannot find the php.ini file in that location, copy the default ini file
into that location. The default php.ini file can be found at
/etc/php.ini.default on MAC, or C:/php/php.ini-development. Make sure to rename
the file to php.ini after you copied it into the ini folder.

## Changing php.ini file

Add the following to the end of your php.ini file to load the sqlite module:

If you installed Ammps, the sqlite module may already be turned on for you.
Check the phpinfo webpage to see if the PDO sqlite module is already loaded.
If not, add the following line to your php.ini file

```bash
extension=php_pdo_sqlite.dll
```

Add the following to the end of your php.ini file so that php shows any error
messages on the webpage it produces:

```bash
display_errors = On
```

## Creating a directory alias

You can create a php file under the DocumentRoot and work on that file.
If you'd rather work under a different folder, you can create an alias to your
folder. E.g., add the following to your Apache configuration, after changing the
”/Users/Ashley/Dropbox/bmes550.Ashley/web” folder name below with which folder
you'd like to work in.

```bash
# Use this to create link to WSL folders within windows
# Run in a CMD window as Administrator
mklink /d "Z:/Vault/sites/{ALIAS}" "\\wsl.localhost\{DISTRO}\{PATH_TO_FOLDER}"
```

```bash
# This alias becomes available on your browser as http://localhost/bmes550web/
Alias /bmes550web /Users/Ashley/Dropbox/bmes550.Ashley/web
<Directory "/Users/Ashley/Dropbox/bmes550.Ashley/web">
    Options Indexes FollowSymLinks Multiviews
    MultiviewsMatch Any
    AllowOverride None

    # This is the old way of granting access only to localhost:
    # Order deny,allow
    # Deny from all
    # Allow from 127.0.0.1

    # This is the new way of granting access only to localhost:
    # If this doesn't work, you may need to switch to old method.
    Require all granted
    Require local

    # If with the above settings, you are getting HTTP 403 Permission Denied, 
    # comment out the "Require" lines above, and uncomment the following lines:
    # AllowOverride All
    # Order deny,allow
    # allow from All
</Directory>
```

On a MAC, in addition to above, you may also need to set permissions to your
folder, e.g., “chmod -R ugo+rx /Users/Ashley/Dropbox/bmes550.Ashley/web” and
give execute permissions to every folder leading to hw2. ie.,
“chmod ugo+x /Users/Ashley”, “chmod ugo+x /Users/Ashley/Dropbox”,
“chmod ugo+x /Users/Ashley/Dropbox/bmes550.Ashley”.
